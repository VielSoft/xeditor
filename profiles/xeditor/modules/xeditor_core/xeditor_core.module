<?php
/**
 * @file
 * Xeditor module file.
 */

/**
 * Implements hook_init().
 */
function xeditor_core_init() {
  global $base_url;

  // Get menu map.
  $current_menu = menu_get_item();
  $menu_arg = $current_menu['original_map'];

  // Get all loaded javascript.
  $scripts = drupal_add_js();

  // Extend edit module edit.js functionality.
  $js_files = array(
    'xeditor.js',
    'xeditor_core.js',
    'jquery.selection.js',
    'jquery.extends.js',
  );
  $js_dir = drupal_get_path('module', 'xeditor_core') . '/js/';
  $counter = 1;
  foreach ($js_files as $js_file) {
    drupal_add_js($js_dir . $js_file, array(
      'scope' => 'footer',
      'group' => JS_THEME,
      'every_page' => TRUE,
      'weight' => -$counter,
    ));
    $counter++;
  }

  // Pre-load the ckeditor.js for manipulating user selection.
  if (!in_array('profiles/xeditor/libraries/ckeditor/ckeditor.js', $scripts)) {
    drupal_add_js('profiles/xeditor/libraries/ckeditor/ckeditor.js', array(
      'scope' => 'footer',
      'group' => JS_THEME,
      'every_page' => TRUE,
      'weight' => -3,
    ));
  }
  // CSS file for Barley-like feel.
  drupal_add_css(drupal_get_path('module', 'xeditor_core') . '/css/xeditor.css');

  // Make sure that base_url is available on xeditor.js.
  drupal_add_js(array(
    'xeditor_core' => array('base_path' => $base_url),
  ), 'setting');

  // Get the arg 0.
  drupal_add_js(array(
    'xeditor_core' => array('arg_zero' => $menu_arg[0]),
  ), 'setting');
}


/**
 * Implements hook_menu().
 */
function xeditor_core_menu() {
  $items = array();

  $items['ajax-callback'] = array(
    'description' => 'Ajax handler for creating and editing of node.',
    'access arguments' => array('administer nodes'),
    'page callback' => '_xeditor_core_node_save',
    'title' => 'AJAX Handler',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Ajax handler for saving content.
 *
 * @TODO:
 *   1. Get the data bundle in field_config_instance to make the
 *      demo content type fields editable after installation.
 *
 *   2. Create an API to get all fields in a given content type.
 */
function _xeditor_core_node_save() {
  if (isset($_POST['nid']) && isset($_POST['content'])) {
    $nid = $_POST['nid'];
    $raw_data = $_POST['content'];
    $field = $_POST['field'];
    // Load node object, bypass the cache system.
    $node = node_load($nid, NULL, TRUE);
    $url_arg = (isset($_POST['arg']) ? $_POST['arg'] : '');
    // Input format.
    $format = filter_format_load('filtered_html');

    // Filter the raw data.
    $filtered_content = check_markup(
      $raw_data,
      $format->format,
      $langcode = '',
      $cache = FALSE
    );

    // Create new revision.
    $node->revision = 1;

    if ($field == 'TITLE') {
      $node->title = $filtered_content;
    }
    elseif ($field == 'null') {
      if ($url_arg != 'node') {
        $node->body[$node->language][0]['summary'] = $filtered_content;
        $node->log = "Updated the node - " . filter_xss($node->title, array());
      }
      else {
        $node->body[$node->language][0]['value'] = $filtered_content;
        $node->log = "Updated the node - " . filter_xss($node->title, array());
      }
    }
    else {
      // Fallback.
    }

    // Disable pathauto to prevent overwritting of pathalias.
    $node->path['pathauto'] = FALSE;

    // Validate the node.
    node_validate($node);
    // Prepares node for saving by populating author and creation date.
    node_submit($node);
    // Save node.
    node_save($node);
  }
}

<?php
/**
 * @file
 * Xeditor module file.
 */

/**
 * Implements hook_init().
 */
function xeditor_core_init() {
  global $base_url;

  // Get menu map.
  $current_menu = menu_get_item();
  $menu_arg = $current_menu['original_map'];

  if (!path_is_admin(current_path())) {
    // Get all loaded javascript.
    $scripts = drupal_add_js();

    // Extend edit module edit.js functionality.
    $js_files = array(
      'xeditor.js',
      'xeditor_core.js',
      'jquery.selection.js',
      'jquery.extends.js',
    );
    $js_dir = drupal_get_path('module', 'xeditor_core') . '/js/';
    $counter = 1;
    foreach ($js_files as $js_file) {
      drupal_add_js($js_dir . $js_file, array(
        'scope' => 'footer',
        'group' => JS_THEME,
        'every_page' => TRUE,
        'weight' => -$counter,
      ));
      $counter++;
    }

    if (module_exists('libraries')) {
      $libraries = libraries_get_libraries();
      // Pre-load the Ckeditor for Inline editing.
      if (array_key_exists('ckeditor', $libraries)) {
        $ck_path = $libraries['ckeditor'];
        if (!in_array($ck_path . '/ckeditor.js', $scripts)) {
          drupal_add_js($ck_path . '/ckeditor.js', array(
            'scope' => 'footer',
            'group' => JS_THEME,
            'every_page' => TRUE,
            'weight' => -3,
          ));
        }
      }

      // Pre-load the jgrowl alert.
      if (array_key_exists('jgrowl', $libraries)) {
        $jgrowl_path = $libraries['jgrowl'];
        if (!in_array($jgrowl_path . '/jquery.jgrowl.js', $scripts)) {
          drupal_add_js($jgrowl_path . '/jquery.jgrowl.js', array(
              'scope' => 'footer',
              'group' => JS_THEME,
              'every_page' => TRUE,
              'weight' => -4,
          ));
        }
      }
    }

    // CSS file for Barley-like feel.
    drupal_add_css(drupal_get_path('module', 'xeditor_core') . '/css/xeditor.css');

    // Make sure that base_url is available on xeditor.js.
    drupal_add_js(array(
      'xeditor_core' => array('base_path' => $base_url),
    ), 'setting');

    // Get the arg 0.
    drupal_add_js(array(
      'xeditor_core' => array('arg_zero' => $menu_arg[0]),
    ), 'setting');
  }
}


/**
 * Implements hook_entity_info_alter().
 */
function xeditor_core_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['full'] = array(
    // Enabled by default in all node bundles.
    'label' => t('Full content'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_menu().
 */
function xeditor_core_menu() {
  $items = array();

  $items['ajax-callback'] = array(
    'description' => 'Ajax handler for creating and editing of node.',
    'access arguments' => array('access contenteditable'),
    'page callback' => '_xeditor_core_node_save',
    'title' => 'AJAX Handler',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Ajax handler for saving content.
 *
 * @TODO:
 *   1. Get the data bundle in field_config_instance to make the
 *      demo content type fields editable after installation.
 *
 *   2. Create an API to get all fields in a given content type.
 */
function _xeditor_core_node_save() {
  if (isset($_POST['nid']) && isset($_POST['content'])) {
    $nid = $_POST['nid'];
    $raw_data = $_POST['content'];
    $field = $_POST['field'];
    // Load node object, bypass the cache system.
    $node = node_load($nid, NULL, TRUE);
    $url_arg = (isset($_POST['arg']) ? $_POST['arg'] : '');
    // Input format.
    $format = filter_format_load('filtered_html');

    // Filter the raw data.
    $filtered_content = check_markup(
      $raw_data,
      $format->format,
      $langcode = '',
      $cache = FALSE
    );

    // Get all the fields.
    $fields = field_info_instances("node", $node->type);

    // Create new revision.
    $node->revision = 1;
    // Disable pathauto to prevent overwritting of pathalias.
    $node->path['pathauto'] = FALSE;

    // Unset unnecessary fields to reduce time in saving.
    foreach ($fields as $key => $cck_field) {
      if ($field == 'TITLE') {
        $node->title = $filtered_content;
        unset($node->$key);
      }
      // CCK fiels must used field_attach_update() API for optimize performance.
      elseif ($field == 'null' && $key == 'body') {
        if ($url_arg != 'node') {
          $node->body[$node->language][0]['summary'] = $filtered_content;
          $node->log = "Updated the node - " . filter_xss($node->title, array());
        }
        else {
          $node->body[$node->language][0]['value'] = $filtered_content;
          $node->log = "Updated the node - " . filter_xss($node->title, array());
        }

        // Unset unnecessary fields.
        if ($key != 'body') {
          unset($node->$key);
        }
      }
      else {
        // Fallback.
      }
    }
    // Validate the node.
    node_validate($node);
    // Prepares node for saving by populating author and creation date.
    node_submit($node);
    // Save node.
    node_save($node);
  }
}


/**
 * Get the node id.
 */
function node_id_is() {
  $page_node = menu_get_object();
  if (isset($page_node->nid)) {
    return $page_node->nid;
  }
}
